exit
@hugo
@hugo = Hugo.instance("Hugo").name
puts CustomSingleton.instance("Hugo").name
puts CustomSingleton.instance("Victor").name
exit
@hugo
n
exit
true if [1,2,3] - (9..15).to_a
true if [1,2,3] - (9..10).to_a
true if [1,2,3] - (9..1).to_a
true if [1,2,3] - (1..2).to_a
true if [1,2,3] - (1,2).to_a
true if ["1","2","3"] - ("1","2").to_a
true if [1,2,3] - (1..9).to_a
[1,2,3] - (1..9).to_a
[1,2,3,'A'] & (1..9).to_a
a.included_in?(["9034", "4104", "0690", "3412"])
exit
array.included_in?(a)
array.included_in?
array = Array.new
exit
array.included_in?a
array.included_in? a
arra.included_in? a
arra.included_in?a
array = Array.new
exit
a.included_in?(["9034", "4104", "0690", "3412"])
exit
a.include?(["9034", "4104", "0690", "3412"])
a.include?("9034", "4104", "0690", "3412")
a
a.include?("0690")
exit
a.include?("1")
exit
teste
a
teste
a
n
exit
method(:multiply).call(2, 4)
n
exit
sum_10_elements
n
sum_10_elements
n
sum(2,4,5)
exit
sum(2,4,5)
sum
exit
parser_json.parse
parser_json = TextParser.new('My Text', JSONParser.new)
parser_xml.parse
parser_xml = TextParser.new('My Text', XMLParser.new)
exit
parser_json.parse
parser_json = TextParser.new('My Text', :json)
parser_xml.parse
parser_json = TextParser.new('My Text', :json)
parser_xml.parse
parser_xml.oarse
parser_xml
parse_xml
parser_xml = TextParser.new('My Text', :xml)
n
teste.my_map(["foo", "bar"])
n
teste
